// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String? @unique
  password   String?
  permission Int?
  //Nota média de todas avaliações
  notaMedia  Float?

 tel  String?

 profilePicture String?

  //Cada usuário pertencea a uma empresa
  company_id String  @db.ObjectId
  company    company? @relation(fields: [company_id], references: [id])

  //Cada usuário possui varias OneOnOnes
  oneonones_IDs String[]   @db.ObjectId
  oneonone      oneonone[] @relation(fields: [oneonones_IDs], references: [id])

  oneononesManager      oneonone[] @relation("Manager")
  oneononesCollaborator oneonone[] @relation("Collaborator")

  //Cada usuário pertence a uma empresa
  equipe_id String? @db.ObjectId
  equipe    teams?  @relation(fields: [equipe_id], references: [id])

  actions action[]
}

model company {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  cnpj String?

  //   //Cada empresa possui N usuários
  users users[]

  //   //A empresa irá possuir vários OneOnOne's
  oneonones oneonone[]

  //   //A empresa irá possuir várias teams
  teams teams[]
}

model oneonone {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?

  manager_id String @db.ObjectId
  manager    users  @relation("Manager", fields: [manager_id], references: [id])

  collaborator_id String @db.ObjectId
  collaborator    users  @relation("Collaborator", fields: [collaborator_id], references: [id])

  //Cada OneOnOne pertence a uma equipe
  team_id String @db.ObjectId
  team    teams  @relation(fields: [team_id], references: [id])

  //Cada OneOnOne pertence a 2 usuários [ 1 gestor e 1 usuário ]
  users_IDs String[] @db.ObjectId
  users     users[]  @relation(fields: [users_IDs], references: [id])

  //Cada OneOnOne irá pertencer a uma empresa
  company_id String  @db.ObjectId
  company    company @relation(fields: [company_id], references: [id])

  //Cada OneOnOne possuí uma ou mais ações
  actions action[]
}

model teams {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  //Cada equipe irá possuir vários usuários
  users users[]

  //  Cada equipe irá possuir várias OneOnOne's
  oneonones oneonone[]

  //Cada equipe irá pertencer a uma empresa
  company_id String  @db.ObjectId
  company    company @relation(fields: [company_id], references: [id])
}

model action {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  //Data para o ( prazo de conclusão )
  deadline_date DateTime

  completion_date DateTime

  //Cada action irá pertencer a uma company
  oneonone_id String   @db.ObjectId
  oneonone    oneonone @relation(fields: [oneonone_id], references: [id])

  //Cada action irá pertencer a um usuário
  user_id String @db.ObjectId
  user    users  @relation(fields: [user_id], references: [id])
}
